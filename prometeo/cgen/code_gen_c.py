# -*- coding: utf-8 -*-
"""
Part of the astor library for Python AST manipulation.

License: 3-clause BSD

Copyright (c) 2008      Armin Ronacher
Copyright (c) 2012-2017 Patrick Maupin
Copyright (c) 2013-2017 Berker Peksag

This module converts an AST into Python source code.

Before being version-controlled as part of astor,
this code came from here (in 2012):

    https://gist.github.com/1250562

"""

import ast
import sys

from .op_util import get_op_symbol, get_op_precedence, Precedence
from .node_util import ExplicitNodeVisitor
from .string_repr import pretty_string
from .source_repr import pretty_source
from collections import namedtuple

# prmt_temp_functions = ["prmt_mat"]
prmt_temp_functions = {"prmt_mat": "___c_prmt___create_prmt_mat", "prmt_print": "___c_prmt___print", "prmt_dgemm": "___c_prmt___dgemm", "prmt_dgead": "___c_prmt___dgead", "prmt_fill": "___c_prmt___fill", "prmt_copy": "___c_prmt___copy"}
prmt_temp_types = {"prmt_mat": "struct prmt_mat *", "None": "void", "NoneType": "void", "ptr_int": "int *", "ptr_prmt_mat": "struct prmt_mat **","int": "int", "double": "double"}

usr_temp_types = {}

def to_source(node, module_name, indent_with=' ' * 4, add_line_information=False,
              pretty_string=pretty_string, pretty_source=pretty_source, main=False, ___c_prmt_8_heap_size=None, ___c_prmt_64_heap_size=None):
    """This function can convert a node tree back into python sourcecode.
    This is useful for debugging purposes, especially if you're dealing with
    custom asts not generated by python itself.

    It could be that the sourcecode is evaluable when the AST itself is not
    compilable / evaluable.  The reason for this is that the AST contains some
    more data than regular sourcecode does, which is dropped during
    conversion.

    Each level of indentation is replaced with `indent_with`.  Per default this
    parameter is equal to four spaces as suggested by PEP 8, but it might be
    adjusted to match the application's styleguide.

    If `add_line_information` is set to `True` comments for the line numbers
    of the nodes are added to the output.  This can be used to spot wrong line
    number information of statement nodes.

    """
    if ___c_prmt_8_heap_size is None or ___c_prmt_64_heap_size is None :
        error('Need to pass heap_sizes! Exiting.')

    generator = SourceGenerator(indent_with, ___c_prmt_8_heap_size,
                                ___c_prmt_64_heap_size, add_line_information,
                                pretty_string,
                                )
    
    generator.result.source.append('#include "prmt_mat_blasfeo_wrapper.h"\n')
    generator.result.source.append('#include "prmt_heap.h"\n')
    generator.result.source.append('#include "%s.h"\n' %(module_name))

    generator.visit(node)
    
    generator.result.source.append('\n')
    if set(generator.result.source[0]) == set('\n'):
        generator.result.source[0] = ''
    
    generator.result.header.append('\n')
    if set(generator.result.header[0]) == set('\n'):
        generator.result.header[0] = ''

    # if main==True:
    #     generator.result.source.append('')
    #     generator.result.source.append('}')
    #     generator.result.source.append('\n')
    #     generator.result.source.append('')
    
    return generator.result


def precedence_setter(AST=ast.AST, get_op_precedence=get_op_precedence,
                      isinstance=isinstance, list=list):
    """ This only uses a closure for performance reasons,
        to reduce the number of attribute lookups.  (set_precedence
        is called a lot of times.)
    """

    def set_precedence(value, *nodes):
        """Set the precedence (of the parent) into the children.
        """
        if isinstance(value, AST):
            value = get_op_precedence(value)
        for node in nodes:
            if isinstance(node, AST):
                node._pp = value
            elif isinstance(node, list):
                set_precedence(value, *node)
            else:
                assert node is None, node

    return set_precedence


set_precedence = precedence_setter()


class Delimit(object):
    """A context manager that can add enclosing
       delimiters around the output of a
       SourceGenerator method.  By default, the
       parentheses are added, but the enclosed code
       may set discard=True to get rid of them.
    """

    discard = False

    def __init__(self, tree, *args):
        """ use write instead of using result.source directly
            for initial data, because it may flush
            preceding data into result.source.
        """
        delimiters = '()'
        node = None
        op = None
        for arg in args:
            if isinstance(arg, ast.AST):
                if node is None:
                    node = arg
                else:
                    op = arg
            else:
                delimiters = arg
        tree.write(delimiters[0], dest = 'src')
        result = self.result = tree.result
        result.source = self.result.source = tree.result.source
        self.index = len(result.source)
        self.closing = delimiters[1]
        if node is not None:
            self.p = p = get_op_precedence(op or node)
            self.pp = pp = tree.get__pp(node)
            self.discard = p >= pp

    def __enter__(self):
        return self

    def __exit__(self, *exc_info):
        result = self.result
        result.source = self.result.source
        start = self.index - 1
        if self.discard:
            result.source[start] = ''
        else:
            result.source.append(self.closing)


class SourceGenerator(ExplicitNodeVisitor):
    """This visitor is able to transform a well formed syntax tree into Python
    sourcecode.

    For more details have a look at the docstring of the `node_to_source`
    function.
    """
    using_unicode_literals = False
    
    def __init__(self, indent_with,  ___c_prmt_8_heap_size, ___c_prmt_64_heap_size, 
                add_line_information=False,pretty_string=pretty_string,
                 # constants
                 len=len, isinstance=isinstance, callable=callable):
        
        self.result = namedtuple('result', 'source header')
        self.result.source = [] 
        self.result.header = []
        self.indent_with = indent_with
        self.add_line_information = add_line_information
        self.indentation = 0 # Current indentation level
        self.new_lines = 0   # Number of lines to insert before next code
        self.colinfo = 0, 0  # index in result.source of string containing linefeed, and
                             # position of last linefeed in that string
        self.pretty_string = pretty_string
        AST = ast.AST

        visit = self.visit
        newline = self.newline
        result = self.result
        result.source = self.result.source
        result.header = self.result.header
        append_src = result.source.append
        append_hdr = result.header.append
    
        self.heap8_size  = ___c_prmt_8_heap_size 
        self.heap64_size = ___c_prmt_64_heap_size 

        self.typed_record = {}
        
        def write(*params, dest):
            """ self.write is a closure for performance (to reduce the number
                of attribute lookups).
            """
            for item in params:
                if isinstance(item, AST):
                    visit(item)
                elif callable(item):
                    item()
                elif item == '\n':
                    newline()
                else:
                    if dest == 'src':
                        if self.new_lines:
                            append_src('\n' * self.new_lines)
                            self.colinfo = len(result.source), 0
                            append_src(self.indent_with * self.indentation)
                            self.new_lines = 0
                        if item:
                            append_src(item)
                    if dest == 'hdr':
                        if self.new_lines:
                            append_hdr('\n' * self.new_lines)
                            self.colinfo = len(result.header), 0
                            append_hdr(self.indent_with * self.indentation)
                            self.new_lines = 0
                        if item:
                            append_hdr(item)


        self.write = write

    def __getattr__(self, name, defaults=dict(keywords=(),
                    _pp=Precedence.highest).get):
        """ Get an attribute of the node.
            like dict.get (returns None if doesn't exist)
        """
        if not name.startswith('get_'):
            raise AttributeError
        geta = getattr
        shortname = name[4:]
        default = defaults(shortname)

        def getter(node):
            return geta(node, shortname, default)

        setattr(self, name, getter)
        return getter

    def delimit(self, *args):
        return Delimit(self, *args)

    def conditional_write(self, *stuff, dest):
        if stuff[-1] is not None:
            self.write(*stuff, dest = dest)
            # Inform the caller that we wrote
            return True

    def newline(self, node=None, extra=0):
        self.new_lines = max(self.new_lines, 1 + extra)
        if node is not None and self.add_line_information:
            self.write('# line: %s' % node.lineno, dest = 'src')
            self.new_lines = 1

    def body(self, statements):
        self.indentation += 1
        self.write(*statements, dest = 'src')
        self.indentation -= 1

    def body_class(self, statements, name):
        self.indentation += 1
        self.write_class_attributes(*statements, name=name)
        self.write('};', dest = 'hdr')
        self.indentation -= 1
        self.write_class_method_prototypes(*statements, name=name)
        
        self.write('\n', dest = 'src')
        self.write_class_init(*statements, name=name)
        self.write_class_methods(*statements, name=name)


    def write_class_attributes(self, *params, name):
        """ self.write is a closure for performance (to reduce the number
            of attribute lookups).
        """
        for item in params:
            if isinstance(item, ast.AnnAssign):
                set_precedence(item, item.target, item.annotation)
                set_precedence(Precedence.Comma, item.value)
                need_parens = isinstance(item.target, ast.Name) and not item.simple
                begin = '(' if need_parens else ''
                end = ')' if need_parens else ''
                self.write('%s' %item.annotation.id, ' ', '%s' %item.target.id, ';\n', dest = 'hdr')
                # self.conditional_write(' = ', item.value, ';')
            elif isinstance(item, ast.FunctionDef):
                
                # build argument mangling
                f_name_len = len(item.name)
                pre_mangl = '_Z%s' %f_name_len 
                if item.args.__dict__['args'][0].__dict__['arg'] is not 'self':
                    raise Exception("First argument in method {} \
                        must be 'self'. You have '{}'".format(item.name, item.args.__dict__['args'][0].__dict__['arg']))
                else: 
                    # store self argument
                    self_arg = item.args.__dict__['args'][0]
                    # pop self from argument list
                    item.args.__dict__['args'].pop(0)

                post_mangl = self.build_arg_mangling(item.args)
                
                #self.statement(item, self.get_returns(item), ' %s%s%s%s' % (pre_mangl, item.name, post_mangl, name), '_impl(', name, ' *self, ')
                if hasattr(self.get_returns(item), "id"):
                    ret_type = self.get_returns(item).__dict__["id"]
                else:
                    ret_type = self.get_returns(item).__dict__["value"]
                    import pdb; pdb.set_trace()

                if ret_type is None: 
                    ret_type = 'None'

                if  ret_type in prmt_temp_types:
                    ret_type = prmt_temp_types[ret_type]

                self.write('%s (*%s%s%s' % (ret_type, pre_mangl, item.name, post_mangl) , ')', '(%s *self, ' %name, dest = 'hdr')
                self.visit_arguments(item.args, 'hdr')
                self.write(');\n', dest = 'hdr')
                # insert back self argument 
                item.args.__dict__['args'].insert(0, self_arg)
        
    def write_class_method_prototypes(self, *params, name):
        """ self.write is a closure for performance (to reduce the number
            of attribute lookups).
        """
        self.write('\n\n', dest = 'hdr')
        for item in params:
            if isinstance(item, ast.FunctionDef):
                
                # build argument mangling
                f_name_len = len(item.name)
                pre_mangl = '_Z%s' %f_name_len 
                if item.args.__dict__['args'][0].__dict__['arg'] is not 'self':
                    raise Exception("First argument in method {} \
                        must be 'self'. You have '{}'".format(item.name, item.args.__dict__['args'][0].__dict__['arg']))
                else: 
                    # store self argument
                    self_arg = item.args.__dict__['args'][0]
                    # pop self from argument list
                    item.args.__dict__['args'].pop(0)

                post_mangl = self.build_arg_mangling(item.args)
                if hasattr(self.get_returns(item), "id"):
                    ret_type = self.get_returns(item).__dict__["id"]
                else:
                    ret_type = self.get_returns(item).__dict__["value"]

                if ret_type is None: 
                    ret_type = 'None'

                if  ret_type in prmt_temp_types:
                    ret_type = prmt_temp_types[ret_type]

                self.write('%s (%s%s%s%s' % (ret_type, pre_mangl, item.name, post_mangl, name) , '_impl)', '(%s *self, ' %name, dest = 'hdr')
                self.visit_arguments(item.args, 'hdr')
                self.write(');\n', dest = 'hdr')
                # insert back self argument 
                item.args.__dict__['args'].insert(0, self_arg)
    
    def write_class_init(self, *params, name):
        """ self.write is a closure for performance (to reduce the number
            of attribute lookups).
        """
        self.write('void ', name, '_init(struct ', name, ' *object){', dest = 'src')
        self.indentation += 1
        for item in params:
            if isinstance(item, ast.AnnAssign):
                # set_precedence(item, item.target, item.annotation)
                set_precedence(Precedence.Comma, item.value)
                need_parens = isinstance(item.target, ast.Name) and not item.simple
                begin = '(' if need_parens else ''
                end = ')' if need_parens else ''
                # self.statement(item, item.target, ';')
                if item.value != None:
                    if hasattr(item.value, 'value') is False:
                        self.conditional_write('\n', 'object->', item.target, ' = ', item.value, ';', dest = 'src')
                    else:
                        if item.value.value != None:
                            self.conditional_write('\n', 'object->', item.target, ' = ', item.value, ';', dest = 'src')
            elif isinstance(item, ast.FunctionDef):
                
                # build argument mangling
                f_name_len = len(item.name)
                pre_mangl = '_Z%s' %f_name_len 
                if item.args.__dict__['args'][0].__dict__['arg'] is not 'self':
                    raise Exception("First argument in method {} \
                        must be 'self'. You have '{}'".format(item.name, item.args.__dict__['args'][0].__dict__['arg']))
                else: 
                    # store self argument
                    self_arg = item.args.__dict__['args'][0]
                    # pop self from argument list
                    item.args.__dict__['args'].pop(0)

                post_mangl = self.build_arg_mangling(item.args)
                
                self.statement(item, 'object->%s%s%s' %(pre_mangl, item.name, post_mangl), ' = &', '%s%s%s%s' %(pre_mangl, item.name, post_mangl, name), '_impl;')
                
                # build argument mangling
                arg_mangl = self.build_arg_mangling(item.args)
                # insert back self argument 
                item.args.__dict__['args'].insert(0, self_arg)

        self.write('\n}\n', dest = 'src')
        self.indentation -=1
    
    def write_class_methods(self, *params, name):
        """ self.write is a closure for performance (to reduce the number
            of attribute lookups).
        """
        for item in params:
            if isinstance(item, ast.FunctionDef):
                self.decorators(item, 1 if self.indentation else 2)
                # self.write()

                # build argument mangling
                f_name_len = len(item.name)
                pre_mangl = '_Z%s' %f_name_len 
                if item.args.__dict__['args'][0].__dict__['arg'] is not 'self':
                    raise Exception("First argument in method {} \
                        must be 'self'. You have '{}'".format(item.name, item.args.__dict__['args'][0].__dict__['arg']))
                else: 
                    # store self argument
                    self_arg = item.args.__dict__['args'][0]
                    # pop self from argument list
                    item.args.__dict__['args'].pop(0)

                post_mangl = self.build_arg_mangling(item.args)

                if hasattr(self.get_returns(item), "id"):
                    ret_type = self.get_returns(item).__dict__["id"]
                else:
                    ret_type = self.get_returns(item).__dict__["value"]

                if ret_type is None: 
                    ret_type = 'None'

                if  ret_type in prmt_temp_types:
                    ret_type = prmt_temp_types[ret_type]

                self.statement(item, ret_type, ' %s%s%s%s' % (pre_mangl, \
                        item.name, post_mangl, name), '_impl(', name, ' *self, ')

                self.visit_arguments(item.args, 'src')
                self.write(') {', dest = 'src')
                self.body(item.body)
                self.newline(1)
                self.write('}', dest = 'src')

                if not self.indentation:
                    self.newline(extra=2)
                # insert back self argument 
                item.args.__dict__['args'].insert(0, self_arg)

    def else_body(self, elsewhat):
        if elsewhat:
            self.write('\n', 'else:')
            self.body(elsewhat)

    def body_or_else(self, node):
        self.body(node.body)
        self.else_body(node.orelse)

    def visit_arguments(self, node, dest_in):
        want_comma = []

        def write_comma():
            if want_comma:
                self.write(', ', dest = dest_in)
            else:
                want_comma.append(True)

        def loop_args(args, defaults):
            set_precedence(Precedence.Comma, defaults)
            padding = [None] * (len(args) - len(defaults))
            for arg, default in zip(args, padding + defaults):
                # fish c type from typed record
                arg_type_py = arg.annotation.id

                arg_type_c = prmt_temp_types[arg_type_py]
                self.write(write_comma, arg_type_c,' ',arg.arg, dest = dest_in)

                # add variable to typed record
                self.typed_record[arg.arg] = arg_type_py
                self.conditional_write('=', default, dest = 'src')

        loop_args(node.args, node.defaults)
        self.conditional_write(write_comma, '*', node.vararg, dest = 'src')

        kwonlyargs = self.get_kwonlyargs(node)
        if kwonlyargs:
            if node.vararg is None:
                self.write(write_comma, '*')
            loop_args(kwonlyargs, node.kw_defaults)
        self.conditional_write(write_comma, '**', node.kwarg, dest = 'src')

    def build_arg_mangling(self, node):
        want_comma = []

        def loop_args_mangl(args, defaults):
            set_precedence(Precedence.Comma, defaults)
            padding = [None] * (len(args) - len(defaults))
            arg_mangl = ''
            for arg, default in zip(args, padding + defaults):
                arg_mangl = arg_mangl + arg.annotation.id
            return arg_mangl

        arg_mangl = loop_args_mangl(node.args, node.defaults)
        return arg_mangl
    
    def build_arg_mangling_mod(self, args):
        want_comma = []

        def loop_args_mangl(args):
            arg_mangl = ''
            for arg in args:
                arg_mangl = arg_mangl + self.typed_record[arg.__dict__['id']]
            return arg_mangl

        arg_mangl = loop_args_mangl(args)
        return arg_mangl

    def statement(self, node, *params, **kw):
        self.newline(node)
        self.write(*params, dest = 'src')

    def decorators(self, node, extra):
        self.newline(extra=extra)
        for decorator in node.decorator_list:
            self.statement(decorator, '@', decorator)

    def comma_list(self, items, trailing=False):
        set_precedence(Precedence.Comma, *items)
        for idx, item in enumerate(items):
            self.write(', ' if idx else '', item)
        self.write(',' if trailing else '')

    # Statements
    def visit_Assign(self, node):
        if 'targets' in node.__dict__:
            if type(node.__dict__["targets"][0]) == ast.Subscript: 
                if 'value' in node.__dict__["targets"][0].__dict__["value"].__dict__:
                    target = node.__dict__["targets"][0].__dict__["value"].__dict__["value"].__dict__["id"]
                    if target in self.typed_record: 
                        # map subscript for prmt_mats to blasfeo el assign
                        if self.typed_record[target] == 'prmt_mat':
                            target = node.__dict__["targets"][0]
                            sub_type = type(target.__dict__["value"].__dict__["slice"].__dict__["value"])
                            if sub_type == ast.Num:
                                first_index = node.__dict__["targets"][0].__dict__["value"].__dict__["slice"].__dict__["value"].__dict__["n"]
                            elif sub_type == ast.Name:
                                first_index = node.__dict__["targets"][0].__dict__["value"].__dict__["slice"].__dict__["value"].__dict__["id"]
                            else:
                                raise Exception("Subscripting with value of type {} not implemented".format(sub_type))

                            sub_type = type(target.__dict__["slice"].__dict__["value"])
                            if sub_type == ast.Num: 
                                second_index = node.__dict__["targets"][0].__dict__["slice"].__dict__["value"].__dict__["n"]
                            elif sub_type == ast.Name: 
                                second_index = node.__dict__["targets"][0].__dict__["slice"].__dict__["value"].__dict__["id"]
                            else:
                                raise Exception("Subscripting with value of type {} not implemented".format(sub_type))

                            # check if subscripted expression is used in the value
                            if type(node.__dict__["value"]) == ast.Subscript:
                                # if value is a prmt_mat
                                value = node.__dict__["value"].__dict__["value"].__dict__["value"].__dict__["id"]
                                if value in self.typed_record:
                                    if self.typed_record[value] == 'prmt_mat':
                                        sub_type = type(node.__dict__["value"].__dict__["slice"].__dict__["value"])
                                        if sub_type == ast.Num:
                                            second_index_value = node.__dict__["value"].__dict__["slice"].__dict__["value"].__dict__["n"]
                                        elif sub_type == ast.Name:
                                            second_index_value = node.__dict__["value"].__dict__["slice"].__dict__["value"].__dict__["id"]
                                        else:
                                            raise Exception("Subscripting with value of type {} not implemented".format(sub_type))

                                        sub_type = type(node.__dict__["value"].__dict__["value"].__dict__["slice"].__dict__["value"])
                                        if sub_type == ast.Num: 
                                            first_index_value = node.__dict__["value"].__dict__["value"].__dict__["slice"].__dict__["value"].__dict__["n"]
                                        elif sub_type == ast.Name: 
                                            first_index_value = node.__dict__["value"].__dict__["value"].__dict__["slice"].__dict__["value"].__dict__["id"]
                                        else:
                                            raise Exception("Subscripting with value of type {} not implemented".format(sub_type))

                                        value_expr = '___c_prmt___prmt_mat_get_el(' + value + ', {}, {})'.format(first_index_value, second_index_value) 
                                        # self.statement([], 'prmt_mat_set_el(', target, ', ', first_index, ', ', second_index, ', ', value_expr, ');')
                                        self.statement([], '___c_prmt___prmt_mat_set_el(', value, ', {}'.format(first_index), ', {}'.format(second_index), ', {}'.format(value_expr), ');')
                            else:
                                target = node.__dict__["targets"][0].__dict__["value"].__dict__["value"].__dict__["id"]
                                value = node.__dict__["value"].__dict__["n"]
                                self.statement([], '___c_prmt___prmt_mat_set_el(', target, ', {}'.format(first_index), ', {}'.format(second_index), ', {}'.format(value), ');')
                            return

            elif 'id' in node.__dict__["targets"][0].__dict__: 
                # check for Assigns targeting prmt_mats
                target = node.__dict__["targets"][0].__dict__["id"]
                if target in self.typed_record: 
                    if self.typed_record[target] == 'prmt_mat':
                        if type(node.__dict__["value"]) == ast.BinOp:
                            right_op = node.__dict__["value"].__dict__["right"].__dict__["id"]
                            left_op = node.__dict__["value"].__dict__["left"].__dict__["id"]
                            if right_op in self.typed_record and left_op in self.typed_record:
                                if self.typed_record[right_op] == 'prmt_mat' and self.typed_record[left_op] == 'prmt_mat':
                                    # dgemm
                                    if type(node.__dict__["value"].__dict__["op"]) == ast.Mult:
                                        # set target to zero
                                        self.statement([], '___c_prmt___fill(', target, ', 0.0);')
                                        # call dgemm
                                        self.statement([], '___c_prmt___dgemm(', left_op, ', ', right_op, ', ', target, ', ', target, ');')
                                        return
                                    # dgead
                                    if type(node.__dict__["value"].__dict__["op"]) == ast.Add:
                                        # set target to zero
                                        self.statement([], '___c_prmt___copy(', right_op, ', ', target, ');')
                                        # call dgead
                                        self.statement([], '___c_prmt___dgead(1.0, ', left_op, ', ', target, ');')
                                        return
                                    # dgead (Sub)
                                    if type(node.__dict__["value"].__dict__["op"]) == ast.Sub:
                                        # set target to zero
                                        self.statement([], '___c_prmt___copy(', left_op, ', ', target, ');')
                                        # call dgead
                                        self.statement([], '___c_prmt___dgead(-1.0, ', right_op, ', ', target, ');')
                                        return

            elif 'attr' in node.__dict__["targets"][0].__dict__: 
                # Assign targeting a user-defined class (C struct)
                struct_name = node.__dict__["targets"][0].__dict__["value"].__dict__["id"]
                if struct_name in self.typed_record:
                    attr_value = node.__dict__["value"].__dict__["n"]
                    attr_name = node.__dict__["targets"][0].__dict__["attr"] 
                    self.statement([], struct_name, '->', attr_name, ' = ', str(attr_value), ';')
                else:
                    raise Exception("Unknown variable {}".format(struct_name))
                return

            else:
                raise Exception("Could not resolve Assign node.")

        set_precedence(node, node.value, *node.targets)
        self.newline(node)
        for target in node.targets:
            self.write(target, ' = ', dest = 'src')
        self.visit(node.value)
        self.write(';', dest = 'src')

    def visit_AugAssign(self, node):
        set_precedence(node, node.value, node.target)
        self.statement(node, node.target, get_op_symbol(node.op, ' %s= '),
                       node.value)

    def visit_AnnAssign(self, node):
        set_precedence(node, node.target, node.annotation)
        set_precedence(Precedence.Comma, node.value)
        need_parens = isinstance(node.target, ast.Name) and not node.simple
        begin = '(' if need_parens else ''
        end = ')' if need_parens else ''
        # check if a List is being declared
        if "value" in node.__dict__:
            if "value" in node.annotation.__dict__:
                if "id" in node.annotation.__dict__["value"].__dict__:
                    if node.annotation.__dict__["value"].__dict__["id"] is 'List':
                        if node.value.__dict__["func"].__dict__["id"] is not 'prmt_list': 
                            raise Exception("Cannot create Lists without using prmt_list constructor.")
                        else:
                            ann = node.annotation.__dict__["slice"].__dict__["value"].__dict__["id"]
                            if  ann in prmt_temp_types:
                                ann = prmt_temp_types[ann]
                            array_size = str(node.value.__dict__["args"][1].__dict__["n"])
                            self.statement([], ann, ' * ', node.target, '[', array_size, '];')
                            return

        # check if the annotation contains directly a type or something fancier
        if "id" in node.annotation.__dict__:
            ann = node.annotation.__dict__["id"]
            # add variable to typed record
            self.typed_record[node.target.__dict__["id"]] = node.annotation.__dict__["id"]
            print(self.typed_record)
            if  ann in prmt_temp_types:
                node.annotation.__dict__["id"] = prmt_temp_types[ann]
                self.statement(node, node.annotation, ' ', node.target)
            # check if annotation corresponds to user-defined class name
            elif  ann in usr_temp_types:
                class_name = node.annotation.__dict__["id"]
                node.annotation.__dict__["id"] = usr_temp_types[ann]
                self.statement([], 'struct ', class_name, ' ', node.target, '___;')
                self.statement(node, node.annotation, ' ', node.target, '= &', node.target, '___;')
                self.statement([], class_name, '_init(', node.target, '); //')
            else:
                self.statement(node, node.annotation, ' ', node.target)
                # raise Exception("Could not resolve type '{}'. Exiting.".format(ann))

        # List[<type>]
        elif "slice" in node.annotation.__dict__:
            ann = 'ptr_' + node.annotation.__dict__["slice"].__dict__["value"].__dict__["id"]
            # add variable to typed record
            self.typed_record[node.target.__dict__["id"]] = ann
            print(self.typed_record)
            if  ann in prmt_temp_types:
                c_ann = prmt_temp_types[ann]
                self.statement(node, c_ann, ' ', node.target.__dict__["id"])
            else:
                # self.write(node, node.annotation, ' ', node.target)
                raise Exception("Could not resolve type '{}'. Exiting.".format(ann))
        # switch to avoid double ';'
        if type(node.value) != ast.Call:
            if node.value is not None:
                self.conditional_write(' = ', node.value, ';', dest = 'src')
            else:
                self.conditional_write(';', dest = 'src')
        else:
            if node.value is not None:
                self.conditional_write(' = ', node.value, '', dest = 'src')
            else:
                self.conditional_write('', dest = 'src')



    def visit_ImportFrom(self, node):
        self.statement(node, 'from ', node.level * '.',
                       node.module or '', ' import ')
        self.comma_list(node.names)
        # Goofy stuff for Python 2.7 _pyio module
        if node.module == '__future__' and 'unicode_literals' in (
                x.name for x in node.names):
            self.using_unicode_literals = True

    def visit_Import(self, node):
        self.statement(node, 'import ')
        self.comma_list(node.names)

    def visit_Expr(self, node):
        if type(node.__dict__["value"]) is ast.Call:
            if "value" in node.__dict__["value"].__dict__["func"].__dict__:
                var_name = node.__dict__["value"].__dict__["func"].__dict__["value"].__dict__["id"]
                # check if we are calling a method on a prmt_mat object
                if var_name in self.typed_record: 
                    if self.typed_record[var_name] == 'prmt_mat':
                        fun_name = node.__dict__["value"].__dict__["func"].__dict__["attr"] 
                        # add prefix to function call
                        node.__dict__["value"].__dict__["func"].__dict__["attr"] = '___c_prmt___prmt_mat_' + fun_name 
        set_precedence(node, node.value)

        self.statement(node)
        self.generic_visit(node)

    def visit_FunctionDef(self, node, async=False):
        prefix = 'async ' if async else ''
        self.decorators(node, 1 if self.indentation else 2)
        # self.write()
        returns = self.get_returns(node)
        return_type_py = returns.__dict__["value"]

        if node.name == 'main':
            self.write('void *___c_prmt_8_heap; \n', dest = 'src')
            self.write('void *___c_prmt_64_heap; \n', dest = 'src')

        print(return_type_py)
        return_type_c = prmt_temp_types[return_type_py.__class__.__name__]
        # self.statement(node, self.get_returns(node), '%s %s' % (prefix, node.name), '(')
        self.write(return_type_c, ' %s' %(node.name), '(', dest = 'src')
        self.visit_arguments(node.args, 'src')
        self.write(') {\n', dest = 'src')
        if node.name == 'main':
            self.write('    ___c_prmt_8_heap = malloc(%s); \n' %(self.heap8_size), dest = 'src')
            self.write('    char *mem_ptr = (char *)___c_prmt_8_heap; \n', dest = 'src')
            self.write('    align_char_to(8, &mem_ptr);\n', dest = 'src')
            self.write('    ___c_prmt_8_heap = mem_ptr;\n', dest = 'src')
            
            self.write('    ___c_prmt_64_heap = malloc(%s); \n' %(self.heap64_size), dest = 'src')
            self.write('    mem_ptr = (char *)___c_prmt_64_heap; \n', dest = 'src')
            self.write('    align_char_to(64, &mem_ptr);\n', dest = 'src')
            self.write('    ___c_prmt_64_heap = mem_ptr;\n', dest = 'src')

        # self.write(':')
        self.body(node.body)
        self.newline(1)
        self.write('}', dest='src')
        if not self.indentation:
            self.newline(extra=2)

    # introduced in Python 3.5
    def visit_AsyncFunctionDef(self, node):
        self.visit_FunctionDef(node, async=True)

    def visit_ClassDef(self, node):
        have_args = []

        def paren_or_comma():
            if have_args:
                self.write(', ')
            else:
                have_args.append(True)
                self.write('(')
        # add new type to templated types
        usr_temp_types[node.name] = 'struct ' + node.name + ' *' 

        self.decorators(node, 0)
        self.write('typedef struct %s %s;\n\n' %(node.name, node.name), dest = 'hdr')
        self.write('struct %s' %node.name, dest = 'hdr')
        for base in node.bases:
            self.write(paren_or_comma, base)
        # keywords not available in early version
        for keyword in self.get_keywords(node):
            self.write(paren_or_comma, keyword.arg or '',
                       '=' if keyword.arg else '**', keyword.value)
        self.conditional_write(paren_or_comma, '*', self.get_starargs(node), dest = 'src')
        self.conditional_write(paren_or_comma, '**', self.get_kwargs(node), dest = 'src')
        self.write(have_args and ')' or '', dest = 'src')
        self.write('{\n', dest = 'hdr')
        self.body_class(node.body, node.name)
        #if not self.indentation:
        #    self.newline(extra=-6)

    def visit_If(self, node):
        set_precedence(node, node.test)
        self.statement(node, 'if(', node.test, ') {')
        self.body(node.body)
        while True:
            else_ = node.orelse
            if len(else_) == 1 and isinstance(else_[0], ast.If):
                node = else_[0]
                set_precedence(node, node.test)
                self.write('\n', 'elif ', node.test, ':')
                self.body(node.body)
            else:
                self.else_body(else_)
                break
        self.write('\n}', dest = 'src')

    def visit_For(self, node, async=False):
        set_precedence(node, node.target)
        prefix = 'async ' if async else ''
       
        self.statement(node, 'for(int ',
                       node.target, ' = 0; ', node.target, 
                       ' < {}'.format(node.iter.args[0].n), 
                       '; ',node.target, '++) {')

        self.body_or_else(node)
        self.write('\n    }\n', dest = 'src')

    # introduced in Python 3.5
    def visit_AsyncFor(self, node):
        self.visit_For(node, async=True)

    def visit_While(self, node):
        set_precedence(node, node.test)
        self.statement(node, 'while(', node.test, ') {')
        self.body_or_else(node)
        self.write('\n    }\n', dest = 'src')


    def visit_With(self, node, async=False):
        prefix = 'async ' if async else ''
        self.statement(node, '%swith ' % prefix)
        if hasattr(node, "context_expr"):  # Python < 3.3
            self.visit_withitem(node)
        else:                              # Python >= 3.3
            self.comma_list(node.items)
        self.write(':')
        self.body(node.body)

    # new for Python 3.5
    def visit_AsyncWith(self, node):
        self.visit_With(node, async=True)

    # new for Python 3.3
    def visit_withitem(self, node):
        self.write(node.context_expr)
        self.conditional_write(' as ', node.optional_vars, dest = 'src')

    def visit_NameConstant(self, node):
        self.write(str(node.value), dest = 'src')

    def visit_Pass(self, node):
        self.statement(node, 'pass')

    def visit_Print(self, node):
        # XXX: python 2.6 only
        self.statement(node, 'print ')
        values = node.values
        if node.dest is not None:
            self.write(' >> ')
            values = [node.dest] + node.values
        self.comma_list(values, not node.nl)

    def visit_Delete(self, node):
        self.statement(node, 'del ')
        self.comma_list(node.targets)

    def visit_TryExcept(self, node):
        self.statement(node, 'try:')
        self.body(node.body)
        self.write(*node.handlers)
        self.else_body(node.orelse)

    # new for Python 3.3
    def visit_Try(self, node):
        self.statement(node, 'try:')
        self.body(node.body)
        self.write(*node.handlers)
        self.else_body(node.orelse)
        if node.finalbody:
            self.statement(node, 'finally:')
            self.body(node.finalbody)

    def visit_ExceptHandler(self, node):
        self.statement(node, 'except')
        if self.conditional_write(' ', node.type, dest = 'src'):
            self.conditional_write(' as ', node.name, dest = 'src')
        self.write(':')
        self.body(node.body)

    def visit_TryFinally(self, node):
        self.statement(node, 'try:')
        self.body(node.body)
        self.statement(node, 'finally:')
        self.body(node.finalbody)

    def visit_Exec(self, node):
        dicts = node.globals, node.locals
        dicts = dicts[::-1] if dicts[0] is None else dicts
        self.statement(node, 'exec ', node.body)
        self.conditional_write(' in ', dicts[0], dest = 'src')
        self.conditional_write(', ', dicts[1], dest = 'src')

    def visit_Assert(self, node):
        set_precedence(node, node.test, node.msg)
        self.statement(node, 'assert ', node.test)
        self.conditional_write(', ', node.msg, dest = 'src')

    def visit_Global(self, node):
        self.statement(node, 'global ', ', '.join(node.names))

    def visit_Nonlocal(self, node):
        self.statement(node, 'nonlocal ', ', '.join(node.names))

    def visit_Return(self, node):
        set_precedence(node, node.value)
        self.statement(node, 'return')
        self.conditional_write(' ', node.value, ';', dest = 'src')

    def visit_Break(self, node):
        self.statement(node, 'break')

    def visit_Continue(self, node):
        self.statement(node, 'continue')

    def visit_Raise(self, node):
        # XXX: Python 2.6 / 3.0 compatibility
        self.statement(node, 'raise')
        if self.conditional_write(' ', self.get_exc(node), dest = 'src'):
            self.conditional_write(' from ', node.cause, dest = 'src')
        elif self.conditional_write(' ', self.get_type(node), dest = 'src'):
            set_precedence(node, node.inst)
            self.conditional_write(', ', node.inst, dest = 'src')
            self.conditional_write(', ', node.tback, dest = 'src')

    # Expressions

    def visit_Attribute(self, node):
        if  self.typed_record[node.value.__dict__['id']] in usr_temp_types: 
            self.write(node.value, '->', node.attr, dest = 'src')
        else:
            raise Exception("Accessing attribute of object {} of unknown type".format(node.value))

    def visit_Call(self, node, len=len):
        write = self.write
        want_comma = []

        def write_comma():
            if want_comma:
                write(', ', dest = 'src')
            else:
                want_comma.append(True)
       
        args = node.args
        keywords = node.keywords
        starargs = self.get_starargs(node)
        kwargs = self.get_kwargs(node)
        numargs = len(args) + len(keywords)
        numargs += starargs is not None
        numargs += kwargs is not None
        p = Precedence.Comma if numargs > 1 else Precedence.call_one_arg
        set_precedence(p, *args)

        if type(node.__dict__["func"]) == ast.Name: 
            if  node.__dict__["func"].__dict__["id"] in prmt_temp_functions:
                func_name = node.__dict__["func"].__dict__["id"]
                node.__dict__["func"].__dict__["id"] = prmt_temp_functions[func_name]
        elif type(node.__dict__["func"]) == ast.Attribute: 
            # calling a method of a user-defined class
            func_name = node.__dict__["func"].__dict__["attr"]
            f_name_len = len(func_name)
            pre_mangl = '_Z%s' %f_name_len 
            post_mangl = self.build_arg_mangling_mod(args)
            node.__dict__["func"].__dict__["attr"] = pre_mangl + func_name + post_mangl

        self.visit(node.func)
        if type(node.__dict__["func"]) == ast.Attribute: 
            code = '(' +  node.__dict__["func"].__dict__["value"].__dict__["id"] + ', '
            write(code, dest = 'src')
        else:
            write('(', dest = 'src')

        for arg in args:
            write(write_comma, arg, dest = 'src')

        set_precedence(Precedence.Comma, *(x.value for x in keywords))
        for keyword in keywords:
            # a keyword.arg of None indicates dictionary unpacking
            # (Python >= 3.5)
            arg = keyword.arg or ''
            write(write_comma, arg, '=' if arg else '**', keyword.value)
        # 3.5 no longer has these
        self.conditional_write(write_comma, '*', starargs, dest = 'src')
        self.conditional_write(write_comma, '**', kwargs, dest = 'src')
        write(');', dest = 'src')

    def visit_Name(self, node):
        self.write(node.id, dest = 'src')

    def visit_JoinedStr(self, node):
        self.visit_Str(node, True)

    def visit_Str(self, node, is_joined=False):

        # embedded is used to control when we might want
        # to use a triple-quoted string.  We determine
        # if we are in an assignment and/or in an expression
        precedence = self.get__pp(node)
        embedded = ((precedence > Precedence.Expr) +
                    (precedence >= Precedence.Assign))

        # Flush any pending newlines, because we're about
        # to severely abuse the result.source list.
        self.write('', dest = 'src')
        # result.source = self.result.source

        # Calculate the string representing the line
        # we are working on, up to but not including
        # the string we are adding.

        res_index, str_index = self.colinfo
        current_line = self.result.source[res_index:]
        if str_index:
            current_line[0] = current_line[0][str_index:]
        current_line = ''.join(current_line)

        if is_joined:

            # Handle new f-strings.  This is a bit complicated, because
            # the tree can contain subnodes that recurse back to JoinedStr
            # subnodes...

            def recurse(node):
                for value in node.values:
                    if isinstance(value, ast.Str):
                        self.write(value.s)
                    elif isinstance(value, ast.FormattedValue):
                        with self.delimit('{}'):
                            self.visit(value.value)
                            if value.conversion != -1:
                                self.write('!%s' % chr(value.conversion))
                            if value.format_spec is not None:
                                self.write(':')
                                recurse(value.format_spec)
                    else:
                        kind = type(value).__name__
                        assert False, 'Invalid node %s inside JoinedStr' % kind

            index = len(result.source)
            recurse(node)
            mystr = ''.join(result.source[index:])
            del result.source[index:]
            self.colinfo = res_index, str_index  # Put it back like we found it
            uni_lit = False  # No formatted byte strings

        else:
            mystr = node.s
            uni_lit = self.using_unicode_literals

        mystr = self.pretty_string(mystr, embedded, current_line, uni_lit)

        if is_joined:
            mystr = 'f' + mystr

        self.write(mystr, dest = 'src')

        lf = mystr.rfind('\n') + 1
        if lf:
            self.colinfo = len(result.source) - 1, lf

    def visit_Bytes(self, node):
        self.write(repr(node.s))

    def visit_Num(self, node,
                  # constants
                  new=sys.version_info >= (3, 0)):
        with self.delimit(node) as delimiters:
            s = repr(node.n)

            # Deal with infinities -- if detected, we can
            # generate them with 1e1000.
            signed = s.startswith('-')
            if s[signed].isalpha():
                im = s[-1] == 'j' and 'j' or ''
                assert s[signed:signed + 3] == 'inf', s
                s = '%s1e1000%s' % ('-' if signed else '', im)
            self.write(s, dest = 'src')

            # The Python 2.x compiler merges a unary minus
            # with a number.  This is a premature optimization
            # that we deal with here...
            if not new and delimiters.discard:
                if signed:
                    pow_lhs = Precedence.Pow + 1
                    delimiters.discard = delimiters.pp != pow_lhs
                else:
                    op = self.get__p_op(node)
                    delimiters.discard = not isinstance(op, ast.USub)

    def visit_Tuple(self, node):
        with self.delimit(node) as delimiters:
            # Two things are special about tuples:
            #   1) We cannot discard the enclosing parentheses if empty
            #   2) We need the trailing comma if only one item
            elts = node.elts
            delimiters.discard = delimiters.discard and elts
            self.comma_list(elts, len(elts) == 1)

    def visit_List(self, node):
        with self.delimit('[]'):
            self.comma_list(node.elts)

    def visit_Set(self, node):
        with self.delimit('{}'):
            self.comma_list(node.elts)

    def visit_Dict(self, node):
        set_precedence(Precedence.Comma, *node.values)
        with self.delimit('{}'):
            for idx, (key, value) in enumerate(zip(node.keys, node.values)):
                self.write(', ' if idx else '',
                           key if key else '',
                           ': ' if key else '**', value)

    def visit_BinOp(self, node):
        op, left, right = node.op, node.left, node.right
        with self.delimit(node, op) as delimiters:
            ispow = isinstance(op, ast.Pow)
            p = delimiters.p
            set_precedence((Precedence.Pow + 1) if ispow else p, left)
            set_precedence(Precedence.PowRHS if ispow else (p + 1), right)
            self.write(left, get_op_symbol(op, ' %s '), right, dest = 'src')

    def visit_BoolOp(self, node):
        with self.delimit(node, node.op) as delimiters:
            op = get_op_symbol(node.op, ' %s ')
            set_precedence(delimiters.p + 1, *node.values)
            for idx, value in enumerate(node.values):
                self.write(idx and op or '', value)

    def visit_Compare(self, node):
        with self.delimit(node, node.ops[0]) as delimiters:
            set_precedence(delimiters.p + 1, node.left, *node.comparators)
            self.visit(node.left)
            for op, right in zip(node.ops, node.comparators):
                self.write(get_op_symbol(op, ' %s '), right, dest = 'src')

    def visit_UnaryOp(self, node):
        with self.delimit(node, node.op) as delimiters:
            set_precedence(delimiters.p, node.operand)
            # In Python 2.x, a unary negative of a literal
            # number is merged into the number itself.  This
            # bit of ugliness means it is useful to know
            # what the parent operation was...
            node.operand._p_op = node.op
            sym = get_op_symbol(node.op)
            self.write(sym, ' ' if sym.isalpha() else '', node.operand)

    def visit_Subscript(self, node):
        set_precedence(node, node.slice)
        self.write(node.value, '[', node.slice, ']', dest = 'src')

    def visit_Slice(self, node):
        set_precedence(node, node.lower, node.upper, node.step)
        self.conditional_write(node.lower, dest = 'src')
        self.write(':')
        self.conditional_write(node.upper, dest = 'src')
        if node.step is not None:
            self.write(':')
            if not (isinstance(node.step, ast.Name) and
                    node.step.id == 'None'):
                self.visit(node.step)

    def visit_Index(self, node):
        with self.delimit(node) as delimiters:
            set_precedence(delimiters.p, node.value)
            self.visit(node.value)

    def visit_ExtSlice(self, node):
        dims = node.dims
        set_precedence(node, *dims)
        self.comma_list(dims, len(dims) == 1)

    def visit_Yield(self, node):
        with self.delimit(node):
            set_precedence(get_op_precedence(node) + 1, node.value)
            self.write('yield')
            self.conditional_write(' ', node.value, dest = 'src')

    # new for Python 3.3
    def visit_YieldFrom(self, node):
        with self.delimit(node):
            self.write('yield from ', node.value)

    # new for Python 3.5
    def visit_Await(self, node):
        with self.delimit(node):
            self.write('await ', node.value)

    def visit_Lambda(self, node):
        with self.delimit(node) as delimiters:
            set_precedence(delimiters.p, node.body)
            self.write('lambda ')
            self.visit_arguments(node.args, 'src')
            self.write(': ', node.body)

    def visit_Ellipsis(self, node):
        self.write('...')

    def visit_ListComp(self, node):
        with self.delimit('[]'):
            self.write(node.elt, *node.generators)

    def visit_GeneratorExp(self, node):
        with self.delimit(node) as delimiters:
            if delimiters.pp == Precedence.call_one_arg:
                delimiters.discard = True
            set_precedence(Precedence.Comma, node.elt)
            self.write(node.elt, *node.generators)

    def visit_SetComp(self, node):
        with self.delimit('{}'):
            self.write(node.elt, *node.generators)

    def visit_DictComp(self, node):
        with self.delimit('{}'):
            self.write(node.key, ': ', node.value, *node.generators)

    def visit_IfExp(self, node):
        with self.delimit(node) as delimiters:
            set_precedence(delimiters.p + 1, node.body, node.test)
            set_precedence(delimiters.p, node.orelse)
            self.write(node.body, ' if ', node.test, ' else ', node.orelse)

    def visit_Starred(self, node):
        self.write('*', node.value)

    def visit_Repr(self, node):
        # XXX: python 2.6 only
        with self.delimit('``'):
            self.visit(node.value)

    def visit_Module(self, node):
        self.write(*node.body, dest = 'src')

    visit_Interactive = visit_Module

    def visit_Expression(self, node):
        self.visit(node.body)

    # Helper Nodes

    def visit_arg(self, node):
        self.write(node.arg)
        self.conditional_write(': ', node.annotation, dest = 'src')

    def visit_alias(self, node):
        self.write(node.name)
        self.conditional_write(' as ', node.asname, dest = 'src')

    def visit_comprehension(self, node):
        set_precedence(node, node.iter, *node.ifs)
        set_precedence(Precedence.comprehension_target, node.target)
        stmt = ' async for ' if self.get_is_async(node) else ' for '
        self.write(stmt, node.target, ' in ', node.iter)
        for if_ in node.ifs:
            self.write(' if ', if_)
